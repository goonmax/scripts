#!/usr/bin/env python3
import sqlite3
import argparse
import os

def create_connection(db_file):
    conn = None
    try:
        conn = sqlite3.connect(db_file)
    except Error as e:
        print(e)
    return conn

def create_db(conn):
    createContentTable="""CREATE TABLE IF NOT EXISTS users (
            id integer PRIMARY KEY,
            username text NOT NULL,
            password text NOT NULL,
            cookie text NOT NULL);"""
            #cookies blob);"""
    try:
        c = conn.cursor()
        c.execute(createContentTable)
    except Error as e:
        print(e)

def insert_content(conn, username, password, cookie):
    try:
        cursor = conn.cursor()
        #cursor.execute("INSERT INTO users (username, password, cookie) VALUES (?, ?, ?)", username, password, cookie)
        execute = "INSERT INTO users (username, password, cookie) VALUES (?, ?, ?);"
        data_tuple = (username, password, cookie)
        cursor.execute(execute, data_tuple)
        conn.commit()
        return cursor.lastrowid
    except sqlite3.Error as e:
        print("SQLite error:", e)

# this is usernames, need to do one for password and cookies
def get_username(conn, location):
    sql = """SELECT *
              FROM users
              WHERE username = ?
              """
    cur = conn.cursor()
    cur.execute(sql, location)
    row = cur.fetchone()
    return row[0]

def get_locations():
    try:
        cursor = conn.cursor()
        cursor.execute("SELECT * FROM users")
        rows = cursor.fetchall()
        #return [row[0] for row in rows]
        return rows
    except sqlite3.Error as e:
        print("SQLite error:", e)

if __name__ == "__main__":
    database = r"sqlite.db"
    parser = argparse.ArgumentParser()
    group = parser.add_mutually_exclusive_group(required=True)
    group.add_argument('--create','-c', help='Create Database', action='store_true')
    group.add_argument('--insert','-i', help='Insert Content', action='store_true')
    group.add_argument('--get','-g', help='Get username', action='store_true')
    group.add_argument('--get_all','-l', help='Get all info', action='store_true')

    parser.add_argument('--username','-n')
    parser.add_argument('--password','-p')
    parser.add_argument('--cookie','-e')
    args = parser.parse_args()
    conn = create_connection(database)

    if (args.create):
        print("[+] Creating Database")
        create_db(conn)
    elif (args.insert):
        if(args.username is None and args.password is None and args.cookie is None):
            parser.error("--insert requires --username, --password, --cookie")
        else:
            insert_content(conn, args.username, args.password, args.cookie)
            print("[+] Inserting Data")
            conn.commit()
    elif (args.get):
        if(args.username is None):
            parser.error("--get requires --username, --content.")
        else:
            print("[+] Getting Content")
            print(get_username(conn, (args.username,)))
    if (args.get_all):
        print("[+] Getting All Locations")
        print(get_locations())
